// Generated by Dagger (https://dagger.dev).
package com.business.expenseTracker.domain.usecase.read_datastore;

import com.business.expenseTracker.domain.repository.DatastoreRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GetCurrencyUseCase_Factory implements Factory<GetCurrencyUseCase> {
  private final Provider<DatastoreRepository> datastoreRepositoryProvider;

  public GetCurrencyUseCase_Factory(Provider<DatastoreRepository> datastoreRepositoryProvider) {
    this.datastoreRepositoryProvider = datastoreRepositoryProvider;
  }

  @Override
  public GetCurrencyUseCase get() {
    return newInstance(datastoreRepositoryProvider.get());
  }

  public static GetCurrencyUseCase_Factory create(
      Provider<DatastoreRepository> datastoreRepositoryProvider) {
    return new GetCurrencyUseCase_Factory(datastoreRepositoryProvider);
  }

  public static GetCurrencyUseCase newInstance(DatastoreRepository datastoreRepository) {
    return new GetCurrencyUseCase(datastoreRepository);
  }
}
