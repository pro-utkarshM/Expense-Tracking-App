// Generated by Dagger (https://dagger.dev).
package com.business.expenseTracker.di;

import android.content.Context;
import com.business.expenseTracker.domain.repository.DatastoreRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ExpenseTrackerModule_ProvideDatastoreRepositoryFactory implements Factory<DatastoreRepository> {
  private final Provider<Context> contextProvider;

  public ExpenseTrackerModule_ProvideDatastoreRepositoryFactory(Provider<Context> contextProvider) {
    this.contextProvider = contextProvider;
  }

  @Override
  public DatastoreRepository get() {
    return provideDatastoreRepository(contextProvider.get());
  }

  public static ExpenseTrackerModule_ProvideDatastoreRepositoryFactory create(
      Provider<Context> contextProvider) {
    return new ExpenseTrackerModule_ProvideDatastoreRepositoryFactory(contextProvider);
  }

  public static DatastoreRepository provideDatastoreRepository(Context context) {
    return Preconditions.checkNotNullFromProvides(ExpenseTrackerModule.INSTANCE.provideDatastoreRepository(context));
  }
}
