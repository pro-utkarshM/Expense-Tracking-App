// Generated by Dagger (https://dagger.dev).
package com.business.expenseTracker.presentation.setting_screen;

import com.business.expenseTracker.domain.usecase.read_datastore.GetCurrencyUseCase;
import com.business.expenseTracker.domain.usecase.read_datastore.GetExpenseLimitUseCase;
import com.business.expenseTracker.domain.usecase.read_datastore.GetLimitDurationUseCase;
import com.business.expenseTracker.domain.usecase.read_datastore.GetLimitKeyUseCase;
import com.business.expenseTracker.domain.usecase.write_database.EraseTransactionUseCase;
import com.business.expenseTracker.domain.usecase.write_database.InsertAccountsUseCase;
import com.business.expenseTracker.domain.usecase.write_datastore.EditExpenseLimitUseCase;
import com.business.expenseTracker.domain.usecase.write_datastore.EditLimitDurationUseCase;
import com.business.expenseTracker.domain.usecase.write_datastore.EditLimitKeyUseCase;
import com.business.expenseTracker.domain.usecase.write_datastore.EraseDatastoreUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SettingViewModel_Factory implements Factory<SettingViewModel> {
  private final Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider;

  private final Provider<InsertAccountsUseCase> insertAccountsUseCaseProvider;

  private final Provider<EraseTransactionUseCase> eraseTransactionUseCaseProvider;

  private final Provider<GetExpenseLimitUseCase> getExpenseLimitUseCaseProvider;

  private final Provider<EditExpenseLimitUseCase> editExpenseLimitUseCaseProvider;

  private final Provider<GetLimitKeyUseCase> getLimitKeyUseCaseProvider;

  private final Provider<EditLimitKeyUseCase> editLimitKeyUseCaseProvider;

  private final Provider<EditLimitDurationUseCase> editLimitDurationUseCaseProvider;

  private final Provider<GetLimitDurationUseCase> getLimitDurationUseCaseProvider;

  private final Provider<EraseDatastoreUseCase> eraseDatastoreUseCaseProvider;

  public SettingViewModel_Factory(Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider,
      Provider<InsertAccountsUseCase> insertAccountsUseCaseProvider,
      Provider<EraseTransactionUseCase> eraseTransactionUseCaseProvider,
      Provider<GetExpenseLimitUseCase> getExpenseLimitUseCaseProvider,
      Provider<EditExpenseLimitUseCase> editExpenseLimitUseCaseProvider,
      Provider<GetLimitKeyUseCase> getLimitKeyUseCaseProvider,
      Provider<EditLimitKeyUseCase> editLimitKeyUseCaseProvider,
      Provider<EditLimitDurationUseCase> editLimitDurationUseCaseProvider,
      Provider<GetLimitDurationUseCase> getLimitDurationUseCaseProvider,
      Provider<EraseDatastoreUseCase> eraseDatastoreUseCaseProvider) {
    this.getCurrencyUseCaseProvider = getCurrencyUseCaseProvider;
    this.insertAccountsUseCaseProvider = insertAccountsUseCaseProvider;
    this.eraseTransactionUseCaseProvider = eraseTransactionUseCaseProvider;
    this.getExpenseLimitUseCaseProvider = getExpenseLimitUseCaseProvider;
    this.editExpenseLimitUseCaseProvider = editExpenseLimitUseCaseProvider;
    this.getLimitKeyUseCaseProvider = getLimitKeyUseCaseProvider;
    this.editLimitKeyUseCaseProvider = editLimitKeyUseCaseProvider;
    this.editLimitDurationUseCaseProvider = editLimitDurationUseCaseProvider;
    this.getLimitDurationUseCaseProvider = getLimitDurationUseCaseProvider;
    this.eraseDatastoreUseCaseProvider = eraseDatastoreUseCaseProvider;
  }

  @Override
  public SettingViewModel get() {
    return newInstance(getCurrencyUseCaseProvider.get(), insertAccountsUseCaseProvider.get(), eraseTransactionUseCaseProvider.get(), getExpenseLimitUseCaseProvider.get(), editExpenseLimitUseCaseProvider.get(), getLimitKeyUseCaseProvider.get(), editLimitKeyUseCaseProvider.get(), editLimitDurationUseCaseProvider.get(), getLimitDurationUseCaseProvider.get(), eraseDatastoreUseCaseProvider.get());
  }

  public static SettingViewModel_Factory create(
      Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider,
      Provider<InsertAccountsUseCase> insertAccountsUseCaseProvider,
      Provider<EraseTransactionUseCase> eraseTransactionUseCaseProvider,
      Provider<GetExpenseLimitUseCase> getExpenseLimitUseCaseProvider,
      Provider<EditExpenseLimitUseCase> editExpenseLimitUseCaseProvider,
      Provider<GetLimitKeyUseCase> getLimitKeyUseCaseProvider,
      Provider<EditLimitKeyUseCase> editLimitKeyUseCaseProvider,
      Provider<EditLimitDurationUseCase> editLimitDurationUseCaseProvider,
      Provider<GetLimitDurationUseCase> getLimitDurationUseCaseProvider,
      Provider<EraseDatastoreUseCase> eraseDatastoreUseCaseProvider) {
    return new SettingViewModel_Factory(getCurrencyUseCaseProvider, insertAccountsUseCaseProvider, eraseTransactionUseCaseProvider, getExpenseLimitUseCaseProvider, editExpenseLimitUseCaseProvider, getLimitKeyUseCaseProvider, editLimitKeyUseCaseProvider, editLimitDurationUseCaseProvider, getLimitDurationUseCaseProvider, eraseDatastoreUseCaseProvider);
  }

  public static SettingViewModel newInstance(GetCurrencyUseCase getCurrencyUseCase,
      InsertAccountsUseCase insertAccountsUseCase, EraseTransactionUseCase eraseTransactionUseCase,
      GetExpenseLimitUseCase getExpenseLimitUseCase,
      EditExpenseLimitUseCase editExpenseLimitUseCase, GetLimitKeyUseCase getLimitKeyUseCase,
      EditLimitKeyUseCase editLimitKeyUseCase, EditLimitDurationUseCase editLimitDurationUseCase,
      GetLimitDurationUseCase getLimitDurationUseCase,
      EraseDatastoreUseCase eraseDatastoreUseCase) {
    return new SettingViewModel(getCurrencyUseCase, insertAccountsUseCase, eraseTransactionUseCase, getExpenseLimitUseCase, editExpenseLimitUseCase, getLimitKeyUseCase, editLimitKeyUseCase, editLimitDurationUseCase, getLimitDurationUseCase, eraseDatastoreUseCase);
  }
}
