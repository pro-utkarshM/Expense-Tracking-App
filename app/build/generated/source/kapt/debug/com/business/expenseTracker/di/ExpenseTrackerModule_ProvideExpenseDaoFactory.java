// Generated by Dagger (https://dagger.dev).
package com.business.expenseTracker.di;

import com.business.expenseTracker.data.local.TransactionDao;
import com.business.expenseTracker.data.local.TransactionDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ExpenseTrackerModule_ProvideExpenseDaoFactory implements Factory<TransactionDao> {
  private final Provider<TransactionDatabase> databaseProvider;

  public ExpenseTrackerModule_ProvideExpenseDaoFactory(
      Provider<TransactionDatabase> databaseProvider) {
    this.databaseProvider = databaseProvider;
  }

  @Override
  public TransactionDao get() {
    return provideExpenseDao(databaseProvider.get());
  }

  public static ExpenseTrackerModule_ProvideExpenseDaoFactory create(
      Provider<TransactionDatabase> databaseProvider) {
    return new ExpenseTrackerModule_ProvideExpenseDaoFactory(databaseProvider);
  }

  public static TransactionDao provideExpenseDao(TransactionDatabase database) {
    return Preconditions.checkNotNullFromProvides(ExpenseTrackerModule.INSTANCE.provideExpenseDao(database));
  }
}
