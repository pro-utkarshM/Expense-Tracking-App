// Generated by Dagger (https://dagger.dev).
package com.business.expenseTracker.presentation.insight_screen;

import com.business.expenseTracker.domain.usecase.read_database.Get14DayTransaction;
import com.business.expenseTracker.domain.usecase.read_database.Get3DayTransaction;
import com.business.expenseTracker.domain.usecase.read_database.Get7DayTransaction;
import com.business.expenseTracker.domain.usecase.read_database.GetLastMonthTransaction;
import com.business.expenseTracker.domain.usecase.read_database.GetStartOfMonthTransaction;
import com.business.expenseTracker.domain.usecase.read_database.GetTransactionByTypeUseCase;
import com.business.expenseTracker.domain.usecase.read_datastore.GetCurrencyUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class InsightViewModel_Factory implements Factory<InsightViewModel> {
  private final Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider;

  private final Provider<Get3DayTransaction> get3DayTransactionProvider;

  private final Provider<Get7DayTransaction> get7DayTransactionProvider;

  private final Provider<Get14DayTransaction> get14DayTransactionProvider;

  private final Provider<GetStartOfMonthTransaction> getStartOfMonthTransactionProvider;

  private final Provider<GetLastMonthTransaction> getLastMonthTransactionProvider;

  private final Provider<GetTransactionByTypeUseCase> getAllTransactionProvider;

  public InsightViewModel_Factory(Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider,
      Provider<Get3DayTransaction> get3DayTransactionProvider,
      Provider<Get7DayTransaction> get7DayTransactionProvider,
      Provider<Get14DayTransaction> get14DayTransactionProvider,
      Provider<GetStartOfMonthTransaction> getStartOfMonthTransactionProvider,
      Provider<GetLastMonthTransaction> getLastMonthTransactionProvider,
      Provider<GetTransactionByTypeUseCase> getAllTransactionProvider) {
    this.getCurrencyUseCaseProvider = getCurrencyUseCaseProvider;
    this.get3DayTransactionProvider = get3DayTransactionProvider;
    this.get7DayTransactionProvider = get7DayTransactionProvider;
    this.get14DayTransactionProvider = get14DayTransactionProvider;
    this.getStartOfMonthTransactionProvider = getStartOfMonthTransactionProvider;
    this.getLastMonthTransactionProvider = getLastMonthTransactionProvider;
    this.getAllTransactionProvider = getAllTransactionProvider;
  }

  @Override
  public InsightViewModel get() {
    return newInstance(getCurrencyUseCaseProvider.get(), get3DayTransactionProvider.get(), get7DayTransactionProvider.get(), get14DayTransactionProvider.get(), getStartOfMonthTransactionProvider.get(), getLastMonthTransactionProvider.get(), getAllTransactionProvider.get());
  }

  public static InsightViewModel_Factory create(
      Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider,
      Provider<Get3DayTransaction> get3DayTransactionProvider,
      Provider<Get7DayTransaction> get7DayTransactionProvider,
      Provider<Get14DayTransaction> get14DayTransactionProvider,
      Provider<GetStartOfMonthTransaction> getStartOfMonthTransactionProvider,
      Provider<GetLastMonthTransaction> getLastMonthTransactionProvider,
      Provider<GetTransactionByTypeUseCase> getAllTransactionProvider) {
    return new InsightViewModel_Factory(getCurrencyUseCaseProvider, get3DayTransactionProvider, get7DayTransactionProvider, get14DayTransactionProvider, getStartOfMonthTransactionProvider, getLastMonthTransactionProvider, getAllTransactionProvider);
  }

  public static InsightViewModel newInstance(GetCurrencyUseCase getCurrencyUseCase,
      Get3DayTransaction get3DayTransaction, Get7DayTransaction get7DayTransaction,
      Get14DayTransaction get14DayTransaction,
      GetStartOfMonthTransaction getStartOfMonthTransaction,
      GetLastMonthTransaction getLastMonthTransaction,
      GetTransactionByTypeUseCase getAllTransaction) {
    return new InsightViewModel(getCurrencyUseCase, get3DayTransaction, get7DayTransaction, get14DayTransaction, getStartOfMonthTransaction, getLastMonthTransaction, getAllTransaction);
  }
}
