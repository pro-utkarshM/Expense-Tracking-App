// Generated by Dagger (https://dagger.dev).
package com.business.expenseTracker.presentation.home_screen;

import com.business.expenseTracker.domain.usecase.GetDateUseCase;
import com.business.expenseTracker.domain.usecase.GetFormattedDateUseCase;
import com.business.expenseTracker.domain.usecase.read_database.GetAccountUseCase;
import com.business.expenseTracker.domain.usecase.read_database.GetAccountsUseCase;
import com.business.expenseTracker.domain.usecase.read_database.GetAllTransactionUseCase;
import com.business.expenseTracker.domain.usecase.read_database.GetCurrentDayExpTransactionUseCase;
import com.business.expenseTracker.domain.usecase.read_database.GetDailyTransactionUseCase;
import com.business.expenseTracker.domain.usecase.read_database.GetMonthlyExpTransactionUse;
import com.business.expenseTracker.domain.usecase.read_database.GetWeeklyExpTransactionUseCase;
import com.business.expenseTracker.domain.usecase.read_datastore.GetCurrencyUseCase;
import com.business.expenseTracker.domain.usecase.read_datastore.GetExpenseLimitUseCase;
import com.business.expenseTracker.domain.usecase.read_datastore.GetLimitDurationUseCase;
import com.business.expenseTracker.domain.usecase.read_datastore.GetLimitKeyUseCase;
import com.business.expenseTracker.domain.usecase.write_database.InsertAccountsUseCase;
import com.business.expenseTracker.domain.usecase.write_database.InsertNewTransactionUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class HomeViewModel_Factory implements Factory<HomeViewModel> {
  private final Provider<GetDateUseCase> getDateUseCaseProvider;

  private final Provider<GetFormattedDateUseCase> getFormattedDateUseCaseProvider;

  private final Provider<InsertNewTransactionUseCase> insertDailyTransactionUseCaseProvider;

  private final Provider<InsertAccountsUseCase> insertAccountsUseCaseProvider;

  private final Provider<GetDailyTransactionUseCase> getDailyTransactionUseCaseProvider;

  private final Provider<GetAllTransactionUseCase> getAllTransactionUseCaseProvider;

  private final Provider<GetAccountUseCase> getAccountUseCaseProvider;

  private final Provider<GetAccountsUseCase> getAccountsUseCaseProvider;

  private final Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider;

  private final Provider<GetExpenseLimitUseCase> getExpenseLimitUseCaseProvider;

  private final Provider<GetLimitDurationUseCase> getLimitDurationUseCaseProvider;

  private final Provider<GetLimitKeyUseCase> getLimitKeyUseCaseProvider;

  private final Provider<GetCurrentDayExpTransactionUseCase> getCurrentDayExpTransactionUseCaseProvider;

  private final Provider<GetWeeklyExpTransactionUseCase> getWeeklyExpTransactionUseCaseProvider;

  private final Provider<GetMonthlyExpTransactionUse> getMonthlyExpTransactionUseProvider;

  public HomeViewModel_Factory(Provider<GetDateUseCase> getDateUseCaseProvider,
      Provider<GetFormattedDateUseCase> getFormattedDateUseCaseProvider,
      Provider<InsertNewTransactionUseCase> insertDailyTransactionUseCaseProvider,
      Provider<InsertAccountsUseCase> insertAccountsUseCaseProvider,
      Provider<GetDailyTransactionUseCase> getDailyTransactionUseCaseProvider,
      Provider<GetAllTransactionUseCase> getAllTransactionUseCaseProvider,
      Provider<GetAccountUseCase> getAccountUseCaseProvider,
      Provider<GetAccountsUseCase> getAccountsUseCaseProvider,
      Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider,
      Provider<GetExpenseLimitUseCase> getExpenseLimitUseCaseProvider,
      Provider<GetLimitDurationUseCase> getLimitDurationUseCaseProvider,
      Provider<GetLimitKeyUseCase> getLimitKeyUseCaseProvider,
      Provider<GetCurrentDayExpTransactionUseCase> getCurrentDayExpTransactionUseCaseProvider,
      Provider<GetWeeklyExpTransactionUseCase> getWeeklyExpTransactionUseCaseProvider,
      Provider<GetMonthlyExpTransactionUse> getMonthlyExpTransactionUseProvider) {
    this.getDateUseCaseProvider = getDateUseCaseProvider;
    this.getFormattedDateUseCaseProvider = getFormattedDateUseCaseProvider;
    this.insertDailyTransactionUseCaseProvider = insertDailyTransactionUseCaseProvider;
    this.insertAccountsUseCaseProvider = insertAccountsUseCaseProvider;
    this.getDailyTransactionUseCaseProvider = getDailyTransactionUseCaseProvider;
    this.getAllTransactionUseCaseProvider = getAllTransactionUseCaseProvider;
    this.getAccountUseCaseProvider = getAccountUseCaseProvider;
    this.getAccountsUseCaseProvider = getAccountsUseCaseProvider;
    this.getCurrencyUseCaseProvider = getCurrencyUseCaseProvider;
    this.getExpenseLimitUseCaseProvider = getExpenseLimitUseCaseProvider;
    this.getLimitDurationUseCaseProvider = getLimitDurationUseCaseProvider;
    this.getLimitKeyUseCaseProvider = getLimitKeyUseCaseProvider;
    this.getCurrentDayExpTransactionUseCaseProvider = getCurrentDayExpTransactionUseCaseProvider;
    this.getWeeklyExpTransactionUseCaseProvider = getWeeklyExpTransactionUseCaseProvider;
    this.getMonthlyExpTransactionUseProvider = getMonthlyExpTransactionUseProvider;
  }

  @Override
  public HomeViewModel get() {
    return newInstance(getDateUseCaseProvider.get(), getFormattedDateUseCaseProvider.get(), insertDailyTransactionUseCaseProvider.get(), insertAccountsUseCaseProvider.get(), getDailyTransactionUseCaseProvider.get(), getAllTransactionUseCaseProvider.get(), getAccountUseCaseProvider.get(), getAccountsUseCaseProvider.get(), getCurrencyUseCaseProvider.get(), getExpenseLimitUseCaseProvider.get(), getLimitDurationUseCaseProvider.get(), getLimitKeyUseCaseProvider.get(), getCurrentDayExpTransactionUseCaseProvider.get(), getWeeklyExpTransactionUseCaseProvider.get(), getMonthlyExpTransactionUseProvider.get());
  }

  public static HomeViewModel_Factory create(Provider<GetDateUseCase> getDateUseCaseProvider,
      Provider<GetFormattedDateUseCase> getFormattedDateUseCaseProvider,
      Provider<InsertNewTransactionUseCase> insertDailyTransactionUseCaseProvider,
      Provider<InsertAccountsUseCase> insertAccountsUseCaseProvider,
      Provider<GetDailyTransactionUseCase> getDailyTransactionUseCaseProvider,
      Provider<GetAllTransactionUseCase> getAllTransactionUseCaseProvider,
      Provider<GetAccountUseCase> getAccountUseCaseProvider,
      Provider<GetAccountsUseCase> getAccountsUseCaseProvider,
      Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider,
      Provider<GetExpenseLimitUseCase> getExpenseLimitUseCaseProvider,
      Provider<GetLimitDurationUseCase> getLimitDurationUseCaseProvider,
      Provider<GetLimitKeyUseCase> getLimitKeyUseCaseProvider,
      Provider<GetCurrentDayExpTransactionUseCase> getCurrentDayExpTransactionUseCaseProvider,
      Provider<GetWeeklyExpTransactionUseCase> getWeeklyExpTransactionUseCaseProvider,
      Provider<GetMonthlyExpTransactionUse> getMonthlyExpTransactionUseProvider) {
    return new HomeViewModel_Factory(getDateUseCaseProvider, getFormattedDateUseCaseProvider, insertDailyTransactionUseCaseProvider, insertAccountsUseCaseProvider, getDailyTransactionUseCaseProvider, getAllTransactionUseCaseProvider, getAccountUseCaseProvider, getAccountsUseCaseProvider, getCurrencyUseCaseProvider, getExpenseLimitUseCaseProvider, getLimitDurationUseCaseProvider, getLimitKeyUseCaseProvider, getCurrentDayExpTransactionUseCaseProvider, getWeeklyExpTransactionUseCaseProvider, getMonthlyExpTransactionUseProvider);
  }

  public static HomeViewModel newInstance(GetDateUseCase getDateUseCase,
      GetFormattedDateUseCase getFormattedDateUseCase,
      InsertNewTransactionUseCase insertDailyTransactionUseCase,
      InsertAccountsUseCase insertAccountsUseCase,
      GetDailyTransactionUseCase getDailyTransactionUseCase,
      GetAllTransactionUseCase getAllTransactionUseCase, GetAccountUseCase getAccountUseCase,
      GetAccountsUseCase getAccountsUseCase, GetCurrencyUseCase getCurrencyUseCase,
      GetExpenseLimitUseCase getExpenseLimitUseCase,
      GetLimitDurationUseCase getLimitDurationUseCase, GetLimitKeyUseCase getLimitKeyUseCase,
      GetCurrentDayExpTransactionUseCase getCurrentDayExpTransactionUseCase,
      GetWeeklyExpTransactionUseCase getWeeklyExpTransactionUseCase,
      GetMonthlyExpTransactionUse getMonthlyExpTransactionUse) {
    return new HomeViewModel(getDateUseCase, getFormattedDateUseCase, insertDailyTransactionUseCase, insertAccountsUseCase, getDailyTransactionUseCase, getAllTransactionUseCase, getAccountUseCase, getAccountsUseCase, getCurrencyUseCase, getExpenseLimitUseCase, getLimitDurationUseCase, getLimitKeyUseCase, getCurrentDayExpTransactionUseCase, getWeeklyExpTransactionUseCase, getMonthlyExpTransactionUse);
  }
}
