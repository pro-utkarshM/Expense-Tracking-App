// Generated by Dagger (https://dagger.dev).
package com.business.expenseTracker.presentation.account_screen;

import com.business.expenseTracker.domain.usecase.read_database.GetAccountsUseCase;
import com.business.expenseTracker.domain.usecase.read_database.GetTransactionByAccount;
import com.business.expenseTracker.domain.usecase.read_datastore.GetCurrencyUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AccountViewModel_Factory implements Factory<AccountViewModel> {
  private final Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider;

  private final Provider<GetAccountsUseCase> getAccountsUseCaseProvider;

  private final Provider<GetTransactionByAccount> getTransactionByAccountProvider;

  public AccountViewModel_Factory(Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider,
      Provider<GetAccountsUseCase> getAccountsUseCaseProvider,
      Provider<GetTransactionByAccount> getTransactionByAccountProvider) {
    this.getCurrencyUseCaseProvider = getCurrencyUseCaseProvider;
    this.getAccountsUseCaseProvider = getAccountsUseCaseProvider;
    this.getTransactionByAccountProvider = getTransactionByAccountProvider;
  }

  @Override
  public AccountViewModel get() {
    return newInstance(getCurrencyUseCaseProvider.get(), getAccountsUseCaseProvider.get(), getTransactionByAccountProvider.get());
  }

  public static AccountViewModel_Factory create(
      Provider<GetCurrencyUseCase> getCurrencyUseCaseProvider,
      Provider<GetAccountsUseCase> getAccountsUseCaseProvider,
      Provider<GetTransactionByAccount> getTransactionByAccountProvider) {
    return new AccountViewModel_Factory(getCurrencyUseCaseProvider, getAccountsUseCaseProvider, getTransactionByAccountProvider);
  }

  public static AccountViewModel newInstance(GetCurrencyUseCase getCurrencyUseCase,
      GetAccountsUseCase getAccountsUseCase, GetTransactionByAccount getTransactionByAccount) {
    return new AccountViewModel(getCurrencyUseCase, getAccountsUseCase, getTransactionByAccount);
  }
}
