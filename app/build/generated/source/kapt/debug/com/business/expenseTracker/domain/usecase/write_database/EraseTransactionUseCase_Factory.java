// Generated by Dagger (https://dagger.dev).
package com.business.expenseTracker.domain.usecase.write_database;

import com.business.expenseTracker.domain.repository.TransactionRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class EraseTransactionUseCase_Factory implements Factory<EraseTransactionUseCase> {
  private final Provider<TransactionRepository> repositoryProvider;

  public EraseTransactionUseCase_Factory(Provider<TransactionRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public EraseTransactionUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static EraseTransactionUseCase_Factory create(
      Provider<TransactionRepository> repositoryProvider) {
    return new EraseTransactionUseCase_Factory(repositoryProvider);
  }

  public static EraseTransactionUseCase newInstance(TransactionRepository repository) {
    return new EraseTransactionUseCase(repository);
  }
}
